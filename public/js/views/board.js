// Generated by CoffeeScript 1.3.3
(function() {

  define(['backbone', 'CellView', 'CellGrid', 'CellModel'], function(Backbone, CellView, CellGrid, CellModel) {
    var BoardView, CELLS, DICE_CLASSES;
    DICE_CLASSES = ['one', 'two', 'three', 'four', 'five', 'six'];
    CELLS = [[8], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 16], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8], [6, 7, 8, 9, 10], [6, 10], [4, 5, 6, 7, 8, 9, 10, 11, 12], [4, 12], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [2, 6, 10, 14], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 4, 8, 12, 16], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15], [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15], [1, 3, 5, 7, 9, 11, 13, 15]];
    BoardView = Backbone.View.extend({
      el: $("#board_container"),
      boardSocket: null,
      initialize: function() {
        var _this = this;
        this.playerid = this.options.playerid;
        this.cells = new CellGrid();
        _.each(CELLS, function(line, y) {
          return _.each(line, function(x) {
            return _this.cells.push(new CellModel({
              pos: {
                x: x,
                y: y
              }
            }));
          });
        });
        this.cells.initializeNeighbours();
        return this.render();
      },
      events: {
        "click .back": "backToGameList",
        "click .cell.target": "targetClick"
      },
      render: function() {
        var _this = this;
        this.$('.cell').remove();
        return this.cells.each(function(cell) {
          var cellView;
          cellView = new CellView({
            model: cell
          });
          cellView.render();
          return _this.$('#board').append(cellView.$el);
        });
      },
      updatePawns: function() {
        var _this = this;
        return this.cells.each(function(cell) {
          return cell.set('pawn', _this.model.getPawn(cell.getPosStr()));
        });
      },
      updatePlayerTurn: function() {
        var color, diceClass, turn;
        turn = this.model.get('turn');
        color = CellModel.PAWNS[turn.player];
        this.$('#turn').removeClass();
        this.$('#turn').addClass(color);
        diceClass = DICE_CLASSES[turn.dice];
        this.$('#dice').removeClass();
        this.$('#dice').addClass(diceClass);
        return this.cells.setTurn(turn);
      },
      play: function(game) {
        this.$('.cell').removeClass('selected');
        this.$('.cell').removeClass('target');
        this.model = game;
        this.updatePawns();
        return this.updatePlayerTurn();
      },
      cellSelected: function(event) {
        var cell, moves,
          _this = this;
        this.$('.cell').removeClass('selected');
        this.$('.cell').removeClass('target');
        cell = $(event.currentTarget);
        cell.addClass('selected');
        moves = this.model.getMoves(pawn.data('pos'));
        return _.each(moves, function(posStr) {
          return _this.cells[posStr].addClass('target');
        });
      },
      targetClick: function(event) {
        var cell, pawn;
        cell = $(event.currentTarget);
        pawn = this.$('.pawn.selected');
        this.movePawn(pawn, cell.data('pos'));
        console.log(pawn, cell.data('pos'));
        this.$('.pawn').removeClass('selected');
        return this.$('.cell').removeClass('target');
      },
      backToGameList: function() {
        return this.trigger('back');
      }
    });
    return BoardView;
  });

}).call(this);
