// Generated by CoffeeScript 1.3.3
(function() {

  define(['backbone', 'GameModel'], function(Backbone, GameModel) {
    var BoardView, CELL_HEIGHT, CELL_WIDTH, COLORS, MARGIN;
    CELL_WIDTH = 30;
    CELL_HEIGHT = 30;
    MARGIN = 45;
    COLORS = ['#000000', "#ff0000", "00ff00", "ffff00", "0000ff"];
    BoardView = Backbone.View.extend({
      el: $("#board_container"),
      boardSocket: null,
      initialize: function() {
        this.playerid = this.options.playerid;
        if (this.$('canvas')[0].getContext && this.$('canvas')[0].getContext('2d')) {
          this.context = this.$('canvas')[0].getContext('2d');
        }
        return this.boardSocket = io.connect('/game_list');
      },
      events: {
        "click .back": "backToGameList"
      },
      render: function() {
        if (this.context) {
          this.drawCells();
          return this.drawPawns();
        }
      },
      drawCells: function() {
        var _this = this;
        return _.each(GameModel.BOARD, function(line, j) {
          return _.each(line, function(i) {
            return _this.drawCell(i, j, "#ffffff");
          });
        });
      },
      drawPawns: function() {
        var _this = this;
        return _.each(this.model.get('pawns'), function(pawns, pawnId) {
          return _.each(pawns, function(posStr) {
            var pos;
            pos = posStr.split(':');
            return _this.drawCell(pos[0], pos[1], COLORS[pawnId]);
          });
        });
      },
      drawCell: function(i, j, color) {
        var x, y;
        x = MARGIN + CELL_WIDTH * i;
        y = MARGIN + CELL_WIDTH * j;
        this.context.fillStyle = color;
        return this.context.fillRect(x, y, CELL_WIDTH, CELL_HEIGHT);
      },
      play: function(game) {
        this.model = game;
        return this.render();
      },
      backToGameList: function() {
        return this.trigger('back');
      }
    });
    return BoardView;
  });

}).call(this);
