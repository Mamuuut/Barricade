// Generated by CoffeeScript 1.5.0
(function() {

  define(['underscore', 'backbone'], function(_, Backbone) {
    var CELL_HEIGHT, CELL_WIDTH, CellView, MARGIN;
    CELL_WIDTH = 30;
    CELL_HEIGHT = 30;
    MARGIN = 45;
    CellView = Backbone.View.extend({
      tagName: 'div',
      className: "cell",
      template: _.template($('#cell-template').html()),
      initialize: function() {
        this.model.on('change:pawn', this.updatePawn, this);
        this.model.on('change:hoverable', this.updateHoverable, this);
        this.model.on('change:source', this.updateSource, this);
        return this.model.on('change:target', this.updateTarget, this);
      },
      events: {
        "click": "cellClicked",
        "dblclick": "cellDblClicked"
      },
      render: function() {
        var left, top;
        this.$el.html(this.template());
        left = MARGIN + CELL_WIDTH * this.model.get('pos').x;
        top = MARGIN + CELL_HEIGHT * this.model.get('pos').y;
        this.$el.css({
          width: CELL_WIDTH + 'px',
          height: CELL_HEIGHT + 'px',
          left: left + 'px',
          top: top + 'px'
        });
        this.$el.addClass(this.model.get('type'));
        this.$el.addClass(this.model.get('color'));
        this.pawn = this.$('.pawn');
        this.target = this.$('.target');
        return this.updatePawn();
      },
      updateHoverable: function() {
        if (this.model.get('hoverable')) {
          return this.$el.addClass('hoverable');
        } else {
          return this.$el.removeClass('hoverable');
        }
      },
      updateSource: function() {
        var sourceClass;
        this.$el.removeClass('move-pawn move-barricade');
        sourceClass = this.model.get('source');
        if (sourceClass) {
          return this.$el.addClass(sourceClass);
        }
      },
      updateTarget: function() {
        var targetClass;
        this.target.attr('class', 'target');
        targetClass = this.model.get('target');
        if (targetClass) {
          this.target.addClass(targetClass);
          return this.target.show();
        } else {
          return this.target.hide();
        }
      },
      updatePawn: function() {
        var pawnClass;
        this.pawn.attr('class', 'pawn');
        pawnClass = this.model.get('pawn');
        if (pawnClass) {
          this.pawn.addClass(pawnClass);
          return this.pawn.show();
        } else {
          return this.pawn.hide();
        }
      },
      cellClicked: function() {
        if (this.model.get('hoverable')) {
          this.model.trigger('click:source:pawn', this.model);
        }
        if ('move-pawn' === this.model.get('target')) {
          this.model.trigger('click:target:pawn', this.model);
        }
        if ('move-barricade' === this.model.get('target')) {
          return this.model.trigger('click:target:barricade', this.model);
        }
      },
      cellDblClicked: function() {
        return this.model.trigger('click:target:pawn', this.model);
      }
    });
    return CellView;
  });

}).call(this);
