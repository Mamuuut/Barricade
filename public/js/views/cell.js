// Generated by CoffeeScript 1.3.3
(function() {

  define(['underscore', 'backbone'], function(_, Backbone) {
    var CELL_HEIGHT, CELL_WIDTH, CellView, MARGIN;
    CELL_WIDTH = 30;
    CELL_HEIGHT = 30;
    MARGIN = 45;
    CellView = Backbone.View.extend({
      tagName: 'div',
      className: "cell",
      template: _.template($('#cell-template').html()),
      initialize: function() {
        this.model.on('change:pawn', this.updatePawn, this);
        this.model.on('change:hoverable', this.updateHoverable, this);
        this.model.on('change:selected', this.updateSelected, this);
        return this.model.on('change:targeted', this.updateTargeted, this);
      },
      events: {
        "click": "cellSelected"
      },
      render: function() {
        var left, top;
        this.$el.html(this.template());
        left = MARGIN + CELL_WIDTH * this.model.get('pos').x;
        top = MARGIN + CELL_HEIGHT * this.model.get('pos').y;
        this.$el.css({
          width: CELL_WIDTH + 'px',
          height: CELL_HEIGHT + 'px',
          left: left + 'px',
          top: top + 'px'
        });
        this.$el.addClass(this.model.get('type'));
        this.$el.addClass(this.model.get('color'));
        this.pawn = this.$('.pawn');
        this.target = this.$('.target');
        return this.updatePawn();
      },
      updateHoverable: function() {
        if (this.model.get('hoverable')) {
          return this.$el.addClass('hoverable');
        } else {
          return this.$el.removeClass('hoverable');
        }
      },
      updateSelected: function() {
        if (this.model.get('selected')) {
          return this.$el.addClass('selected');
        } else {
          return this.$el.removeClass('selected');
        }
      },
      updateTargeted: function() {
        if (this.model.get('targeted')) {
          return this.target.show();
        } else {
          return this.target.hide();
        }
      },
      updatePawn: function() {
        var pawnClass;
        this.pawn.attr('class', 'pawn');
        pawnClass = this.model.get('pawn');
        if (pawnClass) {
          this.pawn.addClass(pawnClass);
          return this.pawn.show();
        } else {
          return this.pawn.hide();
        }
      },
      cellSelected: function() {
        if (this.model.get('hoverable')) {
          return this.model.set('selected', true);
        } else if (this.model.get('targeted')) {
          return this.model.trigger('target:selected', this.model);
        }
      }
    });
    return CellView;
  });

}).call(this);
