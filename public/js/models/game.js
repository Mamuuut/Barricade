// Generated by CoffeeScript 1.3.3

/*
  game_model.coffee
*/


(function() {

  define(['underscore', 'backbone'], function(_, Backbone) {
    /*
        Static rules
    */

    var BOARD, EXIT, GameModel, HOUSES, MAX_PLAYERS, MIN_PLAYERS, START, STATUS;
    MIN_PLAYERS = 2;
    MAX_PLAYERS = 4;
    STATUS = ['waiting_player', 'playing', 'complete'];
    BOARD = [[8], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 16], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8], [6, 7, 8, 9, 10], [6, 10], [4, 5, 6, 7, 8, 9, 10, 11, 12], [4, 12], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [2, 6, 10, 14], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [0, 4, 8, 12, 16], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15], [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15], [1, 3, 5, 7, 9, 11, 13, 15]];
    EXIT = "8:0";
    START = {
      red: "2:13",
      green: "6:13",
      yellow: "10:13",
      blue: "14:13"
    };
    HOUSES = {
      red: ["1:14", "2:14", "3:14", "1:15", "2:15", "3:15", "1:16", "3:16"],
      green: ["5:14", "6:14", "7:14", "5:15", "6:15", "7:15", "5:16", "7:16"],
      yellow: ["9:14", "10:14", "11:14", "9:15", "10:15", "11:15", "9:16", "11:16"],
      blue: ["13:14", "14:14", "15:14", "13:15", "14:15", "15:15", "13:16", "15:16"]
    };
    GameModel = Backbone.Model.extend({
      idAttribute: "_id",
      defaults: function() {
        return {
          date: new Date(),
          players: [],
          currentplayer: 0,
          status: 0,
          winner: "",
          pawns: {
            red: _.clone(HOUSES.red),
            green: _.clone(HOUSES.green),
            yellow: _.clone(HOUSES.yellow),
            blue: _.clone(HOUSES.blue),
            black: ["8:1", "8:3", "8:4", "8:5", "6:7", "10:7", "0:11", "4:11", "8:11", "12:11", "16:11"]
          }
        };
      },
      /*
            Helpers
      */

      getNbPlayers: function() {
        return this.get('players').length;
      },
      getPlayersStr: function() {
        return this.getNbPlayers() + "/" + MAX_PLAYERS;
      },
      getStatusStr: function() {
        return STATUS[this.get('status')];
      },
      getDateStr: function() {
        return new Date(this.get('date')).toUTCString();
      },
      hasPlayer: function(playerId) {
        return -1 !== _.indexOf(this.get('players'), playerId);
      },
      isMaster: function(playerId) {
        return 0 === _.indexOf(this.get('players'), playerId);
      },
      isWaitingPlayer: function() {
        return 'waiting_player' === this.getStatusStr();
      },
      isComplete: function() {
        return 'complete' === this.getStatusStr();
      },
      /*
            Actions
      */

      canDelete: function(playerId) {
        return (this.isMaster(playerId)) && this.isWaitingPlayer();
      },
      canPlay: function(playerId) {
        return (this.hasPlayer(playerId)) && 'playing' === this.getStatusStr();
      },
      canJoin: function(playerId) {
        return (!this.hasPlayer(playerId)) && this.getNbPlayers() < MAX_PLAYERS && this.isWaitingPlayer();
      },
      canStart: function(playerId) {
        return (this.isMaster(playerId)) && (this.getNbPlayers() >= MIN_PLAYERS) && this.isWaitingPlayer();
      },
      canQuit: function(playerId) {
        return (this.hasPlayer(playerId)) && (this.getNbPlayers() > 1) && !this.isComplete();
      }
    });
    GameModel.BOARD = BOARD;
    GameModel.getCellClass = function(pos) {
      var cellClass;
      cellClass = void 0;
      if (EXIT === pos) {
        cellClass = 'exit';
      }
      _.each(START, function(start, color) {
        if (start === pos) {
          return cellClass = 'start ' + color;
        }
      });
      _.each(HOUSES, function(house, color) {
        if (-1 !== _.indexOf(house, pos)) {
          return cellClass = 'house ' + color;
        }
      });
      return cellClass;
    };
    return GameModel;
  });

}).call(this);
