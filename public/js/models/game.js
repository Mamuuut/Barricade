// Generated by CoffeeScript 1.3.3

/*
  game_model.coffee
*/


(function() {

  define(['underscore', 'backbone', 'CellModel', 'barricade'], function(_, Backbone, CellModel, Barricade) {
    var GameModel;
    GameModel = Backbone.Model.extend({
      idAttribute: "_id",
      defaults: function() {
        return {
          date: new Date(),
          players: [],
          currentplayer: 0,
          status: 0,
          winner: "",
          pawns: {
            red: _.clone(Barricade.houses.red),
            green: _.clone(Barricade.houses.green),
            yellow: _.clone(Barricade.houses.yellow),
            blue: _.clone(Barricade.houses.blue),
            barricade: ["8:1", "8:3", "8:4", "8:5", "6:7", "10:7", "0:11", "4:11", "8:11", "12:11", "16:11"]
          }
        };
      },
      /*
            Helpers
      */

      getNbPlayers: function() {
        return this.get('players').length;
      },
      getPlayersStr: function() {
        return this.getNbPlayers() + "/" + Barricade.maxPlayers;
      },
      getStatusStr: function() {
        return Barricade.status[this.get('status')];
      },
      getDateStr: function() {
        return new Date(this.get('date')).toUTCString();
      },
      hasPlayer: function(playerId) {
        return -1 !== _.indexOf(this.get('players'), playerId);
      },
      getTurnColor: function() {
        return Barricade.colors[this.get('turn').player];
      },
      getPawn: function(posStr) {
        var pawnColor;
        pawnColor = void 0;
        _.each(this.get('pawns'), function(pawns, color) {
          if (-1 !== _.indexOf(pawns, posStr)) {
            return pawnColor = color;
          }
        });
        return pawnColor;
      },
      isMaster: function(playerId) {
        return 0 === _.indexOf(this.get('players'), playerId);
      },
      isWaitingPlayer: function() {
        return 'waiting_player' === this.getStatusStr();
      },
      isComplete: function() {
        return 'complete' === this.getStatusStr();
      },
      /*
            Actions
      */

      canDelete: function(playerId) {
        return (this.isMaster(playerId)) && this.isWaitingPlayer();
      },
      canPlay: function(playerId) {
        return (this.hasPlayer(playerId)) && 'playing' === this.getStatusStr();
      },
      canJoin: function(playerId) {
        return (!this.hasPlayer(playerId)) && (this.getNbPlayers() < Barricade.maxPlayers) && this.isWaitingPlayer();
      },
      canStart: function(playerId) {
        return (this.isMaster(playerId)) && (this.getNbPlayers() >= Barricade.minPlayers) && this.isWaitingPlayer();
      },
      canQuit: function(playerId) {
        return (this.hasPlayer(playerId)) && (this.getNbPlayers() > 1) && !this.isComplete();
      }
    });
    return GameModel;
  });

}).call(this);
