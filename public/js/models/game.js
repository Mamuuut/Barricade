// Generated by CoffeeScript 1.3.3

/*
  game_model.coffee
*/


(function() {

  define(['underscore', 'backbone'], function(_, Backbone) {
    var GameModel, MAX_PLAYERS, MIN_PLAYERS, STATUS;
    MIN_PLAYERS = 2;
    MAX_PLAYERS = 4;
    STATUS = ['waiting_player', 'playing', 'complete'];
    GameModel = Backbone.Model.extend({
      idAttribute: "_id",
      defaults: function() {
        return {
          date: new Date(),
          players: [],
          currentplayer: 0,
          status: 0
        };
      },
      getNbPlayers: function() {
        return this.get('players').length;
      },
      getPlayersStr: function() {
        return this.getNbPlayers() + "/" + MAX_PLAYERS;
      },
      getStatusStr: function() {
        return STATUS[this.get('status')];
      },
      hasPlayer: function(playerId) {
        return -1 !== _.indexOf(this.get('players'), playerId);
      },
      isMaster: function(playerId) {
        return 0 === _.indexOf(this.get('players'), playerId);
      },
      getDateStr: function() {
        return new Date(this.get('date')).toUTCString();
      },
      canDelete: function(playerId) {
        return (this.isMaster(playerId)) && 'waiting' === this.getStatusStr();
      },
      canPlay: function(playerId) {
        return (this.hasPlayer(playerId)) && 'playing' === this.getStatusStr();
      },
      canJoin: function(playerId) {
        return (!this.hasPlayer(playerId)) && this.getNbPlayers() < MAX_PLAYERS;
      },
      canStart: function(playerId) {
        return (this.isMaster(playerId)) && (this.getNbPlayers() >= MIN_PLAYERS) && 'waiting' === this.getStatusStr();
      }
    });
    return GameModel;
  });

}).call(this);
